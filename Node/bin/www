#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodetest1:server');
var http = require('http');
var mysql = require('mysql');
var MySQLEvents = require('mysql-events');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);
/**
 * Listen on provided port, on all network interfaces.
 */

 var con = mysql.createConnection({
    host: "localhost",
    user: "root",
    password: "",
    database: ""
});

var dsn = {
    host: 'localhost',
    user: 'root',
    password: ''
};

var myCon = MySQLEvents(dsn);
console.log(myCon);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.on('connection', function(client) {
  console.log("connected");

  var event1 = myCon.add('policy_dashboard.users',function (oldRow, newRow) {
    if (oldRow === null) {
      //insert code goes here
      console.log("inserted2 "+ newRow['fields']['UserName']);
  }
});
    
    client.on('getuser', function(data){
      var city=data.city;      
      con.query('SELECT * FROM policies WHERE city=?', [city], function(err,rows){
        if(err) throw err;
        client.emit('showrows',{rows: rows});
      });
    });

    client.on('getUserList', function(data){
      var city=data.city;      
      con.query('SELECT * FROM users WHERE city=? and role != "admin" ', [city], function(err,rows){
        if(err) throw err;
        client.emit('showUserList',{rows: rows});
      });
    });

    client.on('getcontent', function(data){
      var city=data.city;
      var c1=data.c1;  
      var c2=data.c2;
      var c3=data.c3;
      var c4=data.c4;
      var c5=data.c5;
      var polname=data.polname;
      var polID;

      con.query('SELECT * FROM policies WHERE city=? and PolicyName=? ', [city, polname], function(err,rows){
          if(err) throw err;
          polID=rows[0].ID;
        });
      con.query('SELECT * FROM contents WHERE city=? and PolicyName=? ', [city, polname], function(err,rows){
          if(err) throw err;

          if(rows.length >0){
            var values= [c1, c2, c3, c4, c5, city, polname];
            let sql= "UPDATE contents SET c1 =?, c2=?, c3=?, c4=?, c5=? WHERE city=? and PolicyName=?";
            con.query(sql, values, function (err, result, fields) {
              if (err) throw err;
            });
          }
          else{
            var values= [city, polID, polname, c1, c2, c3, c4, c5];
            let sql= "INSERT INTO contents (city, PolicyID, PolicyName, c1, c2, c3, c4, c5) VALUES(?)";
            con.query(sql, [values], function(err,rows){
              if(err) throw err;
            });
          }
      });
    });


    client.on('getname', function(data){
      var city=data.city;
      var polname=data.polname;
      con.query('SELECT * FROM contents WHERE city=? and PolicyName=? ', [city, polname], function(err,rows){
          if(err) throw err;
          client.emit('loadcontents',{rows: rows});
        });
    });

    client.on('selected', function(data){
      var selected=data.selectedRow;
      con.query('SELECT * FROM policies WHERE ID=? ', [selected], function(err,rows){
          if(err) throw err;
          client.emit('loadselectedrows',{rows: rows});
        });
    });

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


module.exports=io;